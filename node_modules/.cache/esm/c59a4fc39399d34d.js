let Post,mongoose;_939‍.x([["checkObjectId",()=>checkObjectId],["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_939‍.w("../../models/post",[["default",["Post"],function(v){Post=v}]]);_939‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);


const {ObjectId} = mongoose.Types;

       const checkObjectId = (ctx, next) => {
    const {id} = ctx.params;
    if (!ObjectId.isValid(id)){
        ctx.status = 400;
        return;
    }
    return next();
}

       const write = async ctx => {
    const {title, body, tags} = ctx.request.body;
    const post = new Post({
        title,
        body,
        tags
    });
    try {
        await post.save();
        ctx.body = post;
    } catch(e) {
        ctx.throw(500, e);
    }
};

       const list = async ctx => {
    try {
        const posts  = await Post.find().exec()
        ctx.body = posts
    } catch (e) {
        ctx.throw(500,e)
    };
};

       const read = async ctx => {
    const {id} = ctx.params;
    try {
        const post = await Post.findById(id).exec();
        if (!post ) {
            ctx.status = 404;
            return;
        }
        ctx.body = post;
    } catch (e) {

        ctx.throw(500,e)
    };
    
};

       const remove = async ctx => {
    const {id} = ctx.params;
    try {
        await Post.findByIdAndRemove(id);
        ctx.status = 204;
    } catch (e) {
        ctx.throw(500,e);
    }
}

       const update = async ctx => {
    const {id} = ctx.params;
    
    try {
        const post = await Post.findByIdAndUpdate(id,ctx.request.body, {
            new: true,
        }).exec();
        if (!post){
            ctx.status = 404;
            return
        }
        ctx.body = post;
    } catch (e) {
        ctx.throw(500,e);
    }
};

