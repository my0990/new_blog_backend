let mongoose,bcrypt,jwt;_eca‍.x([["default",()=>_eca‍.o]]);_eca‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_eca‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_eca‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const {Schema} = mongoose;
const UserSchema = Schema({
    username: String,
    hashedPassword: String
})

UserSchema.methods.generateToken = function() {
    const token = jwt.sign(
        {
            _id: this.id,
            username: this.username,
        },
        process.env.JWT_SECRET,
        {
            expiresIn: '7d',
        },
    );
    return token;
}

UserSchema.methods.setPassword = async function(password){
    const hash = await bcrypt.hash(password, 10);
    this.hashedPassword = hash
}
UserSchema.methods.checkPassword = async function(password){
    const result = await bcrypt.compare(password, this.hashedPassword);
    return result;
}
UserSchema.methods.serialize = function(){
    const data = this.toJSON();
    delete data.hashedPassword;
    return data;
}

UserSchema.statics.findByUsername = async function(username){
    return this.findOne({username});
};

const User = mongoose.model('User',UserSchema);

_eca‍.d(User);